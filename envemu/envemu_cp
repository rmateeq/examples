#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
envemu_cp.py: First implementation of WiSHFUL controller

Usage:
   envemu_cp.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./envemu_cp -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""


import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis

__author__ = "Peter Ruckebusch"
__copyright__ = "Copyright (c) 2015, IMEC IDLAB UGENT"
__version__ = "0.1.0"
__email__ = "peter.ruckebusch@ugent.be"


log = logging.getLogger('envemu_cp.main')
global_control_engine = wishful_controller.Controller()
nodes = []


@global_control_engine.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:")
    print(node)


@global_control_engine.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node)
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@global_control_engine.set_default_callback()
def default_callback(group, node, cmd, data):
    print("{} DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(datetime.datetime.now(), group, node.name, cmd, data))


@global_control_engine.add_callback(upis.mgmt.init_energy_harvester)
def init_energy_harvester_response(group, node, data):
    print("{} init_energy_harvester_response : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))


@global_control_engine.add_callback(upis.mgmt.start_energy_harvester)
def start_energy_harvester_response(group, node, data):
    print("{} start_energy_harvester_response : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))


@global_control_engine.add_callback(upis.mgmt.stop_energy_harvester)
def stop_energy_harvester_response(group, node, data):
    print("{} stop_energy_harvester_response : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))


@global_control_engine.add_callback(upis.mgmt.update_energy_harvester)
def update_energy_harvester_response(group, node, data):
    print("{} update_energy_harvester_response : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    global_control_engine.load_config(config)
    global_control_engine.start()

    gevent.sleep(10)
    print("\n")
    print("Connected nodes", [str(node.name) for node in nodes])
    if nodes:

        # first initialize the environment emulator
        global_control_engine.blocking(True).nodes(nodes).mgmt.iface("ee").init_energy_harvester()
        gevent.sleep(3)

        # start the environment emulator
        global_control_engine.blocking(True).nodes(nodes).mgmt.iface("ee").start_energy_harvester()
        gevent.sleep(100)

        # update the environment emulator
        # global_control_engine.blocking(True).nodes(nodes).mgmt.iface("ee").update_energy_harvester()
        # gevent.sleep(20)

        # stop the environment emulator
        global_control_engine.blocking(True).nodes(nodes).mgmt.iface("ee").stop_energy_harvester()

        gevent.sleep(1)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("global_control_engine exits")
    finally:
        log.debug("Exit")
        global_control_engine.stop()
